#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing double
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Project 2, FYS 3150 / 4150, fall 2013
\end_layout

\begin_layout Author
Nathalie Bonatout and Odd Petter Sand
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The problem was this time to solve the Schrödinger's equation for a system
 of two electrons in a three-dimensional harmonic oscillator well.
 The first step of the project was to do so for a system without a repulsive
 coulomb interaction, then with this interaction.
 
\end_layout

\begin_layout Standard
To do so, we implemented our own algorithms for the Jacobi Rotation, algorithm
 taking into account the presence of the interaction, or not.
 We gave a special attention to the structure of the code.
 We wanted it to be reusable, and the most convenient possible.
 And this is why we apart from the equations, we also had a huge fight with
 the pointers and other nice features of the C++ language.
\end_layout

\begin_layout Standard
In this report, you will find our approaches, step by step, to first implement
 the Jacobi solver, then the Armadillo solver, both of them outputting files
 which had to be plottable.
\end_layout

\begin_layout Standard
(Author's note: This text, and the text introducing the various exercises,
 is taken from the project description provided at the course website.)
\end_layout

\begin_layout Section
Exercises
\end_layout

\begin_layout Subsection
Jacobi's solver without Coulomb's interaction
\end_layout

\begin_layout Standard
We know that the difference between the matrices A and B is defined by the
 following expression:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\Vert B-A\Vert_{F}^{2}=4(1-c)\sum_{i=1,i!=k,l}^{n}(a_{ik}^{2}+a_{il}^{2})+\frac{2a_{lk}^{2}}{c^{2}}
\]

\end_inset


\end_layout

\begin_layout Standard
The main point here is to minimize the difference between A and B, which
 could be understood as the diagonalization of the matrix.
\end_layout

\begin_layout Standard
We already know that 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $a_{k,l}$
\end_inset

 cannot be null since it is the biggest non diagonal element of A.
 Thus, the only possibility for this difference to tends towards zero is
 to have the difference 
\begin_inset Formula $4(c-1)$
\end_inset

 tending towards zero.
\end_layout

\begin_layout Standard
\begin_inset Formula $c$
\end_inset

 can be expressed as 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
c=\frac{1}{\sqrt{1+t^{2}}}
\]

\end_inset


\end_layout

\begin_layout Standard
Since c should be as closed as possible from 1, we should have 
\begin_inset Formula $t$
\end_inset

 close to 0.
 We too know that 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
c=s/t
\]

\end_inset

so we should have 
\begin_inset Formula $t\approx s$
\end_inset

, which is true if and only if 
\begin_inset Formula $\Vert\theta\Vert\lll\pi/4$
\end_inset

.
\end_layout

\begin_layout Standard
Test of our algorithm:
\end_layout

\begin_layout Standard
We know that the first eigenvalues should be around 3,6 then 11.
 This is the result we got for rhoMax = 1000, with 1000 steps:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Screens/first eigenvalues.png
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Caption

\begin_layout Plain Layout
First test of our algorithm
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We chose a tolerance threhold of 
\begin_inset Formula $10^{-7}$
\end_inset

.
 And this test is satisfied: we can go on.
\end_layout

\begin_layout Subsection
Comparison with the tqli algorithm
\end_layout

\begin_layout Standard
We fixed rhoMax at 1000.
 We are know trying to determine how many points we need in order to get
 the three lowest eigenvalues with four leading digits.
 
\end_layout

\begin_layout Standard
With experiments, we chose a number of 30 steps.
 With 30 steps, it implies that around 100 similarity transformations are
 required in order to have the non diagonal element equal to 0 (equal should
 be understood here as 
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $equal\pm toleranceThresold$
\end_inset


\begin_inset Quotes erd
\end_inset

).
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Screens/Elapsed time Jacobi.png
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Timing of our Algorithm
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
So we compared the result of our algorithm with the tqli algorithm, found
 in the lib.cpp file.
 This algorithm is based on the Householder's algorithm, which is, as we
 saw it in the lecture, more efficient than the Jacobi's algorithm, doing
 a reflexion instead of a rotation.
 Furthermore, the Householder's algorithm is designed for tridiagonal matrices,
 which is not the case of our algorithm, designed to be used even for the
 most general cases.
\end_layout

\begin_layout Standard
// tqli nécessite trop d'itérations...
 Reste à trouver pourquoi.
\end_layout

\begin_layout Subsection
Jacobi's solver with Coulomb's interaction
\end_layout

\begin_layout Standard
We know take into account the repulsive Coulomb's interaction.
 Thus, our expression of the potential, which was
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
V_{i}=\rho_{i}^{2}
\]

\end_inset


\end_layout

\begin_layout Standard
now becomes
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
V_{i}=\rho_{i}^{2}*\omega_{r}^{2}+\frac{1}{\rho_{i}}
\]

\end_inset


\end_layout

\begin_layout Standard
Here 
\begin_inset Formula $\omega_{r}$
\end_inset

 represents the stength of the oscillator potential.
 We treat four cases, four different values of
\begin_inset Formula $\omega_{r}$
\end_inset

:
\end_layout

\begin_layout Itemize
\begin_inset Formula $\omega_{r}=0.01$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\omega_{r}=0.5$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\omega_{r}=1$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\omega_{r}=5$
\end_inset


\end_layout

\begin_layout Standard
And the result was quite rational: the smaller value of 
\begin_inset Formula $\omega_{r}$
\end_inset

we take, the more amortized the amplitude of the result is.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Screens/0_01.png
	scale 60

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
For 
\begin_inset Formula $\omega_{r}=0.01$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Screens/5.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
For 
\begin_inset Formula $\omega_{r}=5$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Plotting and explanations !
\end_layout

\begin_layout Standard
So we implemented algorithms for both the non-interaction and the interaction
 cases.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Screens/First try.png
	scale 60

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Plot without Coulomb's interaction
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Source code
\end_layout

\begin_layout Standard
All our source code can be found at our GitHub repository: 
\begin_inset CommandInset href
LatexCommand href
name "https://github.com/OPSand/Project2"
target "https://github.com/OPSand/Project2"

\end_inset


\end_layout

\begin_layout Standard
We attached a lot of importance to the structure of the code.
 We wanted to create a code reusable, and with an easily understandable
 organization.
 Thus, we tried to respect the concept of 
\begin_inset Quotes eld
\end_inset

Model View Controller
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Itemize
the main class, Project2.cpp, calling the other functions and fixing the
 important parameters
\end_layout

\begin_layout Itemize
the functional classes, Equation.cpp and Solver.cpp.
 Each of these classes has inherited classes, such as ArmaSolver.cpp or JacobiSol
ver.cpp, and contains the most global elements for each type of objects
\end_layout

\begin_layout Itemize
the view is dealt with inside the Equation.cpp package: the point here is
 to export the data towards a .txt file, in order to read them later on with
 Matlab.
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
From this project, we have learned the following things:
\end_layout

\begin_layout Itemize
x
\end_layout

\begin_layout Subsection
Comment
\end_layout

\begin_layout Standard
We would like to provide the following items of feedback for future versions
 of this project:
\end_layout

\begin_layout Itemize
Including the lib.cpp and lib.h into a Visual Studio project was a bit of
 a challenge, because to begin with, even the inclusions such as 
\begin_inset Quotes eld
\end_inset

sys/time.h
\begin_inset Quotes erd
\end_inset

, which are working pretty fine on Unix systems, do not work under a Windows
 operating system.
\end_layout

\end_body
\end_document
